// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/person": {
            "get": {
                "description": "Возвращает список людей с возможностью фильтрации и пагинации",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Получить список людей с фильтрацией",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Фильтр по имени",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Фильтр по фамилии",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Фильтр по полу",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Фильтр по национальности",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Минимальный возраст",
                        "name": "age_from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Максимальный возраст",
                        "name": "age_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Номер страницы (по умолчанию 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Лимит записей (по умолчанию 20, максимум 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.GetWithParamResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новую запись, обогащая данные из внешних API (возраст, пол, национальность)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Создать запись о человеке",
                "parameters": [
                    {
                        "description": "Данные о человеке",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.CreatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/person.Person"
                        }
                    },
                    "400": {
                        "description": "Неверные данные или ошибка при обращении к внешнему API",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/person/{id}": {
            "delete": {
                "description": "Удаляет запись по указанному ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Удалить запись о человеке",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID человека",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Неверные данные или ошибка при обращении к внешнему API",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Не найдено",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Обновляет данные существующей записи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Обновить данные человека",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID человека",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Обновляемые данные",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.UpdatePersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Person"
                        }
                    },
                    "400": {
                        "description": "Неверные данные или ошибка при обращении к внешнему API",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Не найдено",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "person.CreatePersonRequest": {
            "description": "Запрос на создание новой записи о человеке",
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "description": "Имя (только буквы, обязательное поле)",
                    "type": "string",
                    "example": "Иван"
                },
                "patronymics": {
                    "description": "Отчество (необязательное, только буквы)",
                    "type": "string",
                    "example": "Иванович"
                },
                "surname": {
                    "description": "Фамилия (только буквы, обязательное поле)",
                    "type": "string",
                    "example": "Иванов"
                }
            }
        },
        "person.GetWithParamResponse": {
            "description": "Ответ со списком людей и общим количеством",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Общее количество записей",
                    "type": "integer",
                    "example": 100
                },
                "persons": {
                    "description": "Список людей",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/person.Person"
                    }
                }
            }
        },
        "person.Person": {
            "description": "Модель данных человека с основной информацией",
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст",
                    "type": "integer",
                    "example": 30
                },
                "created_at": {
                    "description": "Дата создания",
                    "type": "string",
                    "example": "2025-05-29T00:00:00Z"
                },
                "deleted_at": {
                    "description": "Дата удаления (мягкое удаление)",
                    "type": "string",
                    "example": "null"
                },
                "gender": {
                    "description": "Пол (male/female)",
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "description": "ID записи",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Имя человека",
                    "type": "string",
                    "example": "Иван"
                },
                "nationality": {
                    "description": "Национальность (код страны)",
                    "type": "string",
                    "example": "RU"
                },
                "patronymics": {
                    "description": "Отчество (если есть)",
                    "type": "string",
                    "example": "Иванович"
                },
                "surname": {
                    "description": "Фамилия человека",
                    "type": "string",
                    "example": "Иванов"
                },
                "updated_at": {
                    "description": "Дата обновления",
                    "type": "string",
                    "example": "2025-05-29T00:00:00Z"
                }
            }
        },
        "person.UpdatePersonRequest": {
            "description": "Запрос на обновление данных о человеке (все поля необязательные)",
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возраст (от 0 до 120)",
                    "type": "integer",
                    "maximum": 120,
                    "minimum": 0,
                    "example": 30
                },
                "gender": {
                    "description": "Пол (male/female)",
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "name": {
                    "description": "Имя (только буквы)",
                    "type": "string",
                    "example": "Петр"
                },
                "nationality": {
                    "description": "Национальность (код страны ISO 3166-1 alpha-2)",
                    "type": "string",
                    "example": "RU"
                },
                "patronymics": {
                    "description": "Отчество (только буквы)",
                    "type": "string",
                    "example": "Петрович"
                },
                "surname": {
                    "description": "Фамилия (только буквы)",
                    "type": "string",
                    "example": "Петров"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Effective Mobile API",
	Description:      "Сервис для обогащения ФИО информацией из открытых API (возраст, пол, национальность) и хранения данных в базе.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
